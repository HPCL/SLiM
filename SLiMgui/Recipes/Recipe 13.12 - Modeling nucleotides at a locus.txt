initialize() {
	defineConstant("C", 10);      // number of loci
	
	// Create our loci
	for (locus in 0:(C-1))
	{
		// Effects for the nucleotides ATGC are drawn from a normal DFE
		effects = rnorm(4, mean=0, sd=0.05);
		
		// Each locus is set up with its own mutType and geType
		mtA = initializeMutationType(locus*4 + 0, 0.5, "f", effects[0]);
		mtT = initializeMutationType(locus*4 + 1, 0.5, "f", effects[1]);
		mtG = initializeMutationType(locus*4 + 2, 0.5, "f", effects[2]);
		mtC = initializeMutationType(locus*4 + 3, 0.5, "f", effects[3]);
		mt = c(mtA, mtT, mtG, mtC);
		geType = initializeGenomicElementType(locus, mt, c(1,1,1,1));
		initializeGenomicElement(geType, locus, locus);
		
		// We do not want mutations at this locus to stack or fix
		mt.mutationStackPolicy = "l";
		mt.mutationStackGroup = locus;
		mt.convertToSubstitution = F;
		
		// Each mutation type knows the nucleotide it represents
		mtA.setValue("nucleotide", "A");
		mtT.setValue("nucleotide", "T");
		mtG.setValue("nucleotide", "G");
		mtC.setValue("nucleotide", "C");
	}
	
	initializeMutationRate(1e-6);   // includes 25% identity mutations
	initializeRecombinationRate(1e-8);
}

1 late() {
	sim.addSubpop("p1", 2000);
	
	// The initial population is fixed for a single wild-type
	// nucleotide fixed at each locus in the chromosome
	g = p1.genomes;
	
	cat("Initial nucleotide sequence:");
	
	for (locus in 0:(C-1))
	{
		// This chooses and sets a random nucleotide for the locus, drawn
		// according to the weights used in the genomic element type
		geType = sim.chromosome.genomicElements[locus].genomicElementType;
		mutTypes = geType.mutationTypes;
		weights = geType.mutationFractions;
		mutType = sample(mutTypes, 1, weights=weights);
		mut = g.addNewDrawnMutation(mutType, locus);
		
		cat(" " + mut.mutationType.getValue("nucleotide"));
	}
	
	cat("\n\n");
}

late() {
	// optionally, we can unique new mutations onto existing mutations
	allMuts = sim.mutations;
	newMuts = allMuts[allMuts.originGeneration == sim.generation];
	oldMuts = allMuts[allMuts.originGeneration != sim.generation];
	
	for (newMut in newMuts)
	{
		newMutLocus = newMut.position;
		newMutType = newMut.mutationType;
		oldLocus = oldMuts[oldMuts.position == newMutLocus];
		oldMatched = oldLocus[oldLocus.mutationType == newMutType];
		
		if (size(oldMatched) == 1)
		{
			// We found a match; this nucleotide already exists, substitute
			genomes = sim.subpopulations.genomes;
			containing = genomes[genomes.containsMutations(newMut)];
			containing.removeMutations(newMut);
			containing.addMutations(oldMatched);
		}
		else
		{
			// First instance; it is now the standard reference mutation
			oldMuts = c(oldMuts, newMut);
		}
	}
}

10000 late() {
	muts = p1.genomes.mutations;   // all mutations, no uniquing
	
	for (locus in 0:(C-1))
	{
		locusMuts = muts[muts.position == locus];
		totalMuts = size(locusMuts);
		uniqueMuts = unique(locusMuts);
		
		catn("Base position " + locus + ":");
		
		for (mut in uniqueMuts)
		{
			// figure out which nucleotide mut represents
			mutType = mut.mutationType;
			nucleotide = mutType.getValue("nucleotide");
			cat("   " + nucleotide + ": ");
			
			nucCount = sum(locusMuts == mut);
			nucPercent = format("%0.1f%%", (nucCount / totalMuts) * 100);
			
			cat(nucCount + " / " + totalMuts + " (" + nucPercent + ")");
			cat(", s == " + mut.selectionCoeff + "\n");
		}
	}
}
