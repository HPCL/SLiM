initialize() {
	defineConstant("L", 1e4);      // number of loci
	
	// mutation type for each nucleotide, all neutral
	mtA = initializeMutationType(0, 0.5, "f", 0.0);
	mtT = initializeMutationType(1, 0.5, "f", 0.0);
	mtG = initializeMutationType(2, 0.5, "f", 0.0);
	mtC = initializeMutationType(3, 0.5, "f", 0.0);
	mt = c(mtA, mtT, mtG, mtC);
	
	mtA.setValue("nucleotide", "A");
	mtT.setValue("nucleotide", "T");
	mtG.setValue("nucleotide", "G");
	mtC.setValue("nucleotide", "C");
	c(mtA,mtT).color = "blue";
	c(mtG,mtC).color = "red";
	
	// We do not want mutations to stack or fix
	mt.mutationStackPolicy = "l";
	mt.mutationStackGroup = -1;
	mt.convertToSubstitution = F;
	
	// chromosome of nucleotides, with gene conversion
	initializeGenomicElementType("g1", mt, c(1,1,1,1));
	initializeGenomicElement(g1, 0, L-1);
	initializeMutationRate(1e-6);   // includes 25% identity mutations
	initializeRecombinationRate(1e-6);
	initializeGeneConversion(0.5, 100);
}
function (f)gcContent(void)
{
	nucs = sim.mutations.mutationType.getValue("nucleotide");
	counts = sim.mutationCounts(NULL);
	totalA = sum(counts[nucs == "A"]);
	totalT = sum(counts[nucs == "T"]);
	totalG = sum(counts[nucs == "G"]);
	totalC = sum(counts[nucs == "C"]);
	total = totalA + totalT + totalG + totalC;
	return (totalC + totalG)*100/total;
}
1 late() {
	sim.addSubpop("p1", 1000);
	
	// The initial population is fixed for a random wild-type
	// nucleotide at each locus in the chromosome
	mutTypes = sample(g1.mutationTypes, L, replace=T);
	p1.genomes.addNewDrawnMutation(mutTypes, 0:(L-1));
	
	catn("Initial GC content: " + gcContent());
}
recombination() {
	if (size(gcStarts) != 1)
		return F;	// no change unless a gene conversion
	if (size(breakpoints) > 0)
		return F;	// no change if any recombination
	
	// We have a gene conversion event; we will accept it if it
	// increases the GC content of the tract in question
	gcMuts1 = genome1.mutations;
	gcMuts1 = gcMuts1[gcMuts1.position >= gcStarts];
	gcMuts1 = gcMuts1[gcMuts1.position < gcEnds];
	gcNucs1 = gcMuts1.mutationType.getValue("nucleotide");
	gcGC1 = sum((gcNucs1 == "G") | (gcNucs1 == "C")) / size(gcNucs1);
	
	gcMuts2 = genome2.mutations;
	gcMuts2 = gcMuts2[gcMuts2.position >= gcStarts];
	gcMuts2 = gcMuts2[gcMuts2.position < gcEnds];
	gcNucs2 = gcMuts2.mutationType.getValue("nucleotide");
	gcGC2 = sum((gcNucs2 == "G") | (gcNucs2 == "C")) / size(gcNucs2);
	
	if (gcGC2 > gcGC1)
		return F;	// no change if we like the new tract
	
	// reject the new tract
	gcStarts = integer(0);
	gcEnds = integer(0);
	return T;
}
1:1000000 late() {
	if (sim.generation % 1000 == 0)
		catn(sim.generation + " GC content: " + gcContent());
}
