// Keywords: biased gene conversion

initialize() {
	defineConstant("L", 1e5);      // number of loci
	
	// We model a chromosome assumed to be an even mix of AT and GC.  We then model
	// two types of mutations on top of that background: mutations from GC to AT,
	// and mutations from AT to GC.  Both are neutral here.
	mtAT = initializeMutationType(0, 0.5, "f", 0.0);
	mtAT.color = "blue";
	mtAT.tag = -1;
	
	mtGC = initializeMutationType(1, 0.5, "f", 0.0);
	mtGC.color = "red";
	mtGC.tag = 1;
	
	// chromosome of length L, with gene conversion
	initializeGenomicElementType("g1", c(mtAT, mtGC), c(1,1));
	initializeGenomicElement(g1, 0, L-1);
	initializeMutationRate(1e-6);
	initializeRecombinationRate(1e-6);
	initializeGeneConversion(0.5, 100);
}
1 late() {
	sim.addSubpop("p1", 1000);
}
recombination() {
	if (size(gcStarts) != 1)
		return F;	// no change unless a gene conversion
	if (size(breakpoints) > 0)
		return F;	// no change if any recombination
	
	// We have a single gene conversion event
	gcMuts = genome2.mutations;
	gcMuts = gcMuts[gcMuts.position >= gcStarts];
	gcMuts = gcMuts[gcMuts.position < gcEnds];
	gcGC = sum(gcMuts.mutationType.tag);
	take = (gcGC > 0);
	
	//catn("tract GC sum: " + gcGC + " - " + (take ? "TAKE" else "REJECT"));
	if (take)
		return F;	// no change if we like the new tract
	
	// reject
	gcStarts = integer(0);
	gcEnds = integer(0);
	return T;
}
1:10000000 late() {
	if (sim.generation % 1000 == 0)
		catn(sim.generation + " GC sum: " + sum(sim.substitutions.mutationType.tag));
}
