initialize() {	initializeMutationRate(0);	initializeMutationType("m1", 0.5, "f", 0.1);   // beneficial	initializeMutationType("m2", 0.5, "f", 0.0);   // p1 marker	m2.convertToSubstitution = F;	initializeGenomicElementType("g1", m1, 1.0);	initializeGenomicElement(g1, 0, 9999);	initializeRecombinationRate(1e-7);}1 {	sim.addSubpop("p1", 500);	sim.addSubpop("p2", 500);}1 late() {	// p1 and p2 are each fixed for one beneficial mutation	p1.genomes.addNewDrawnMutation(m1, 2000);	p2.genomes.addNewDrawnMutation(m1, 8000);		// p1 has marker mutations at every position, to track ancestry	for (pos in 0:sim.chromosome.lastPosition)		p1.genomes.addNewDrawnMutation(m2, pos);		// make p3 be an admixture of p1 and p2 in the next generation	sim.addSubpop("p3", 1000);	p3.setMigrationRates(c(p1, p2), c(0.5, 0.5));}2 late() {	// get rid of p1 and p2	p3.setMigrationRates(integer(0), integer(0));	p1.setSubpopulationSize(0);	p2.setSubpopulationSize(0);}2: late() {	if (sim.mutationsOfType(m1).size() == 0)	{		p3g = p3.genomes;		p1Count = sum(p3g.countOfMutationsOfType(m2));		maxCount = p3g.size() * sim.chromosome.lastPosition;		p1Fraction = p1Count / maxCount;		cat("Fraction with p1 ancestry: " + p1Fraction + "\n");				p1Count = apply(0:sim.chromosome.lastPosition,			"sum(p3g.containsMarkerMutation(m2, applyValue));");		maxCount = p3g.size();		p1Fraction = p1Count / maxCount;		cat("Fraction with p1 ancestry, by position:\n" +			paste(p1Fraction, ", ") + "\n");				sim.simulationFinished();	}}100000 late() {	stop("Did not reach fixation of beneficial alleles.");}