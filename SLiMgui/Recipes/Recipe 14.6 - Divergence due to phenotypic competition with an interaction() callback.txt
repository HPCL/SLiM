initialize() {
	defineConstant("optimum", 5.0);
	defineConstant("sigma_C", 0.4);
	defineConstant("sigma_K", 1.0);
	
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);        // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);   // QTL
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", c(m1, m2), c(1, 0.01));
	initializeGenomicElement(g1, 0, 1e5 - 1);
	initializeRecombinationRate(1e-8);
	
	initializeInteractionType(1, "", reciprocal=T);     // competition
	i1.setInteractionFunction("f", 1.0);
}
1 late() {
	sim.addSubpop("p1", 500);
}
1: late() {
	// construct phenotypes from the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m2);
	
	// evaluate interactions
	i1.evaluate();
}
fitness(m2) {      // make QTLs intrinsically neutral
	return 1.0;
}
fitness(NULL) {    // reward proximity to the optimum
	return 1.0 + dnorm(optimum - individual.tagF, mean=0.0, sd=sigma_K);
}
interaction(i1) {
	return dnorm(exerter.tagF, mean=receiver.tagF, sd=sigma_C) /
		dnorm(0.0, mean=0, sd=sigma_C);
}
fitness(NULL) {    // phenotypic competition
	totalStrength = sum(i1.strength(individual));
	return 1.0 - totalStrength / p1.individualCount;
}
1:99999 late() {
	if (sim.generation == 1)
		cat("  gen    mean      sd\n");
	
	if (sim.generation % 100 == 1)
	{
		tags = p1.individuals.tagF;
		cat(format("%5d  ", sim.generation));
		cat(format("%6.2f  ", mean(tags)));
		cat(format("%6.2f\n", sd(tags)));
	}
}
