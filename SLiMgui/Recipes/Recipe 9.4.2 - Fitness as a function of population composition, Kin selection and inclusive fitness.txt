initialize() {	initializeMutationRate(1e-7);	initializeMutationType("m1", 0.5, "f", 0.0);    // neutral	initializeMutationType("m2", 0.5, "f", 0.1);    // kin recognition	m2.convertToSubstitution = F;	initializeMutationType("m3", 0.5, "f", 0.1);    // kin benefit	m3.convertToSubstitution = F;	initializeGenomicElementType("g1", m1, 1);	initializeGenomicElementType("g2", m2, 1);	initializeGenomicElementType("g3", m3, 1);	initializeGenomicElement(g1, 0, 10000);	initializeGenomicElement(g2, 10001, 13000);	initializeGenomicElement(g1, 13001, 70000);	initializeGenomicElement(g3, 70001, 73000);	initializeGenomicElement(g1, 73001, 99999);	initializeRecombinationRate(1e-8);}1 { sim.addSubpop("p1", 500); }10000 { sim.simulationFinished(); }fitness(m2) {	// count our kin and suffer a fitness cost for altruism	dominance = asInteger(homozygous) * 0.5 + 0.5;	return 1.0 - sim.mutationFrequencies(p1, mut) * dominance * 0.1;}fitness(m3) {	// count our kin and gain a fitness benefit from them	m2Muts = individual.uniqueMutationsOfType(m2);	kinCount = sum(sim.mutationFrequencies(p1, m2Muts));	return 1.0 + sim.mutationFrequencies(p1, mut) * kinCount;}