SLiM:
	mutationsOfType() method could be optimized by caching the result, invalidating the cache only when the registry changes; or by keeping separate registries by type...?
	optimize fitness callback mechanism: it should know which mutation types have active callbacks, and should short-circuit the callback mechanism for types with no callback
	crash: adding a mutation with an introduction generation later than the actual gen can lead to a negative fixation time, causing a negative bin number in the tally code
		setting sim.generation needs to fix up various generation-based buffers; see FIXME
	add a way to calculate the fitness of an individual, period, rather than the fitness effect per mutation
		think about how fitness() callbacks work; would be nice to be able to say "this is it for this individual" or "this is it for this mutation type"

Eidos:
	precalculate and fold expressions like (0:499)*2+1
	fix code completion to handle declared variables – search backwards for an assignment to that variable name, and extract the type from the right-hand side
		or perhaps ask the user what type it is, and remember in a dictionary?
		code completion should also know when you're inside a callback, and supply the correct additional variables

SLiMgui work:
	do a better job saving window positions, splitter positions, etc.
	completion inside a callback could supply the names of vars defined by the callback; this is quite hard though
	improve display in cases with many subpopulations and/or many individuals
		with many individuals, perhaps show a fitness histogram rather than individual squares?  could be an option all the time, actually, sounds useful...
		with many subpops selected, could superimpose such fitness histograms as curves on a single plot?

scriptability:
	extensions for Daphnia model:
		add a "modify generated child" event that can be used to make resting eggs by (1) setting a flag saying that the generated child should not be used, and (2) scheduling a new script event for the future that wakes up the resting egg
		add a "generate child" event that can be used to wake up a resting egg by taking values defining the mutations present and creating a child out of them
		add a "add existing mutation" method that searches for an exact match for mutation parameters, uses that mutation if found, otherwise makes a new mutation – or use an int64_t mutation id to uniquely identify the mutation to re-create, perhaps even better but more complex

changes to mention in docs:
	changed comment format from / to //
	revised example files to use new comment format
	full paths can now be supplied for files
	added ability to pass a seed value on the command line via -seed
	added ability to take a time measurement with -time (probably doesn't need to be documented)
	changed behavior regarding introduced mutations in the same subpopulation and the same generation; they would collide in the same individuals/strands (intentionally; see Philipp email 27 Dec. 2014), now they are placed randomly
	added #SEX command : #SEX \n <A|X|Y> [<x-dominance>]
	extended 'P' event (add subpop) to take an optional "initial sex ratio" double at the end, only when sex is turned on
	selfing changed to be deterministic; the requested selfing fraction is realized exactly in each generation
	migrants are now drawn from the source pop according to their fitness; in 1.8 they were drawn uniformly, although Philipp says it was documented as being according to fitness
	fixed some issues with input parsing; files that do not end in a newline now parse correctly, non-comment non-parameter non-blank lines at the top of a file now cause an error
	changes/additions to full output: now listing individuals (with M/F and genome indices), now stating S/H and sex ratio for populations output, now printing A/X/Y for genomes output
	changes/additions to sample output: now taking an optional M/F specifier to output one sex, now printing A/X/Y for genomes output
	tabs are now trimmed as whitespace in input files, not just spaces
	added new sex ratio change event, type X: <time> X <subpop-index> <ratio>
	population read-in supports the new output additions, but should still be able to read in an old-format output file also
	fix to zero out gene_conversion_fraction_; in version 1.8 gene conversion might have turned on without being requested (see my email to Philipp); added Chromosome constructor to fix this
	more than one mutation with a negative fitness could result in a positive fitness, since the two negatives would multiply to make a positive; fixed in a revision to 1.8, and in 2.0
	predetermined mutations doc says you can specify a selection coefficient and dominance coefficient, but you can't; doc error, apparently
	addition of Eidos, EidosScribe
	mutation equality defined by pointer equality
	MS output slightly changed, now outputs positions spanning the interval [0,1] instead of (0,1]
	add a mention of building with optimization turned on for release builds; makes a big difference!
	mention -D USE_GSL_POISSON compile option
	mention new command-line options like -m, -M, -time
	document the exact way we generate breakpoints – that a new crossover can fall inside a gene conversion stretch

building on the command line for me:
	g++ -O3 ./core/*.cpp ./eidos/*.cpp -I/opt/local/include -iquote./eidos -L/opt/local/lib -lgsl -lgslcblas -std=c++11 -o slim

look for exported symbols that are not tagged with "eidos" or "Eidos" somewhere in the symbol before the parameter list:
	nm -g -U -j ./EidosScribe | grep -E -v "^_+([^_\r\n]+_)*[^_]*[Ee]idos"

some valgrind commands:
	valgrind --leak-check=yes ./slim -testEidos		(with Debug version)
	valgrind --leak-check=yes ./slim -testSLiM		(with Debug version)
	valgrind --tool=cachegrind ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt		(with Release version)
		cg_annotate --sort=DLmr:1,DLmw:1 cachegrind.out.71431
	valgrind --tool=callgrind ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt		(with Release version)
		callgrind_annotate --tree=both callgrind.out.72015
	valgrind --tool=massif ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt			(with Release version)
		ms_print massif.out.73964
	valgrind --tool=exp-sgcheck ./slim -testEidos	(with Debug version; not on Darwin yet)
	valgrind --tool=exp-sgcheck ./slim -testSLiM	(with Debug version; not on Darwin yet)

future plans:
	save per-script-file preferences for the color scale sliders, and later other things too; use the full file path as a key, probably – or put them into the script itself, using SLiMgui-specific tags, maybe
	what about Eidos applications that involve external objects coming and going during the execution of a single script or interactive session?
	think about allowing named arguments as an optional syntax; named arguments good
	could add DFE: user-specified with lookup tables, similar to how recombination rate is specified, to allow arbitrary DFEs from the user
	evaluate code coverage of tests
	an Objective-C port of Eidos would be nice
	might want to be able to set values for constants on the command line, for variation of parameter values driving a script; Philipp is not crazy about this idea though, wait and see
	spatially and temporally varying selection pressures: for mutation-types
		in generation x, I want to change the sel coeff of all mutations of a given mutation-type in a given subpopulation
		what happens for new mutations of that type?
		seasonal changes in optimal phenotype, spatial variation in environmental optimum
		these seasonal changes alter the strength of selection, but not the optimum
		so this is a new type of event: for a given subpop and mutation-type, rescale all selection coefficients by x
	multiple chromosomes – more than one per individual
	test cases for verification: population genetic predictions like fixation probability
	pull the dominance coefficient into the mutations, like the selection coefficient, and add events to change these too?
	possibility of providing the alternative of Poisson-based offspring generation: choose parent pairs, draw # of offspring
		individuals could have individual-types, which would define their expected # of children
		statistical genetics and human evolution: bottlenecks and effective population size, debunking bottleneck myths




























