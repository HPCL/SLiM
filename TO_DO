questions / ideas:
	good tests for validation, optimization
	user interface - learning Swift

set up testing code, check against old version of the code
add private const copy constructors X(const X&) to all classes; nothing should be getting copied!
- softened on this considerably, but copying should still be thought about and monitored for efficiency; and switch from copy initialization to direct initialization in many spots, p. 84
	private:
	Event(const Event&);						// disable copy constructor
	Event &operator = (const Event&);			// disable assignment operator

changes to mention in docs:
	changed comment format from / to //
	revised example files to use new comment format
	full paths can now be supplied for files
	added ability to pass a seed value on the command line via -seed
	added ability to take a time measurement with -time (probably doesn't need to be documented)


building on the command line for me:
	g++ -O3 ./core/*.cpp -I/opt/local/include -L/opt/local/lib -lgsl -lgslcblas -o slim

timings (user time, with g++ build executed on command line):
	1.8:	time ./slim input_example_3.txt		(seed == 1418961197)
		18 Dec. 2014	4m22.112s
	2.0:	time ./slim -seed 1418961197 ./examples/input_example_3.txt
		18 Dec. 2014	4m8.451s	4m8.610s	4m8.102s
		18 Dec. 2014	4m8.412s	(-funroll-loops)	– basically no benefit
		18 Dec. 2014	4m3.373s	(-ffast-math)		– basically no benefit
		18 Dec. 2014	3m41.662s	after caching the result of find(p_subpop_id)->second in Population::CrossoverMutation()
		19 Dec. 2014	3m41.247s	after further find(subpop) optimizations in Population::EvolveSubpopulation()
		19 Dec. 2014	3m37.656s	after checking for degenerate cases for selfing_fraction in Population::EvolveSubpopulation()
		19 Dec. 2014	3m24.652s	after optimizing Subpopulation::FitnessOfIndividualWithGenomeIndices with caching
		19 Dec. 2014	3m7.618s	after optimizing Population::CrossoverMutation() to cache child genome, and writing no-mutation case

output tails:
	-seed 1418961197 ./examples/input_example_3.txt:	339 m1 9221449 -0.000262588 0.2 p1 96159 99118
	-seed 1418990125 ./examples/input_example_1.txt:	72 m1 4678 0 0.5 p1 7486 9424

	19 Dec. 2014: broke backward reproducibility with optimizations
	-seed 1418961197 ./examples/input_example_3.txt:	329 m1 2099186 -0.000473915 0.2 p1 97746 99887

profile results:
	for input_example_1.txt, 97.9% of time spent in gsl_ran_poisson() inside Chromosome::DrawBreakpoints()
	for input_example_3.txt, 97.8% of time spent in gsl_ran_poisson() inside Chromosome::DrawBreakpoints()
	is this really true??  nope.  but Population::CrossoverMutation() is very hot.


