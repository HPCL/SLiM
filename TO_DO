to do:


building on the command line:
	g++ -O3 ./core/*.cpp ./eidos/*.cpp ./gsl/*/*.c -iquote./eidos -iquote./gsl -iquote./gsl/rng -iquote./gsl/randist -iquote./gsl/sys -iquote./gsl/specfunc -iquote./gsl/complex -std=c++11 -o slim

look for exported symbols that are not tagged with "eidos" or "Eidos" somewhere in the symbol before the parameter list:
	nm -g -U -j ./EidosScribe | grep -E -v "^_+([^_\r\n]+_)*[^_]*[Ee]idos"

some valgrind commands:
	valgrind --leak-check=yes ./slim -testEidos		(with Debug version)
	valgrind --leak-check=yes ./slim -testSLiM		(with Debug version)
	valgrind --tool=cachegrind ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt		(with Release version)
		cg_annotate --sort=DLmr:1,DLmw:1 cachegrind.out.71431
	valgrind --tool=callgrind ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt		(with Release version)
		callgrind_annotate --tree=both callgrind.out.72015
	valgrind --tool=massif ./slim -seed 1 /Users/bhaller/Desktop/MK_SLiMGUIsim4.txt			(with Release version)
		ms_print massif.out.73964
	valgrind --tool=exp-sgcheck ./slim -testEidos	(with Debug version; not on Darwin yet)
	valgrind --tool=exp-sgcheck ./slim -testSLiM	(with Debug version; not on Darwin yet)

cpplint.py for checking includes (https://github.com/google/styleguide/tree/gh-pages/cpplint):
	cpplint.py --filter=-,+build/include_what_you_use ./core/*.cpp ./eidos/*.cpp ./eidostool/*.cpp




























