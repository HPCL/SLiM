command-line tool:
	set up testing code for validation, check against old version of the code
	switch to int32_t and such for all storage, I think; best to be predictable.  get rid of static_cast where possible
	could use stoi(), stof(), etc. instead of cstr() and atoi() etc.?
	should we use map instead of multimap?  set?  unordered versions, possibly?
	add move constructor and move assignment operators to classes, = delete, to explicitly prevent those operations
	should perhaps define ostream output operators instead of the print() functions presently used?  but how to pass flags?
	should be using strtod, strtol, etc. in all code instead of atoi, atof
	slimslim: preprocessor variant optimized for minimal memory usage given stricter constraints on the number of subpops, number of mutation types, etc.
	add support for rules as discussed with Philipp: modify the fitness calculation with a call out to SLiMscript

SLiMscript:
	extensions for Daphnia model
		add a "modify generated child" event that can be used to make resting eggs by (1) setting a flag saying that the generated child should not be used, and (2) scheduling a new script event for the future that wakes up the resting egg
		add a "generate child" event that can be used to wake up a resting egg by taking values defining the mutations present and creating a child out of them
		add a "add existing mutation" method that searches for an exact match for mutation parameters, uses that mutation if found, otherwise makes a new mutation – or use an int64_t mutation id to uniquely identify the mutation to re-create, perhaps even better but more complex
	implement help()
	add rigorous tests for all functions
	for Erich: implement a symbol table browser, implement functions, add regression tests, implement a help system based on some sort of file-based representation
	documentation work: explain the concept of NULL as an exceptional case, always allowed to be returned, allowing the caller to catch the problem without a crash if they check
	documentation work: revise docs for min, max, range, sum, product, sd, whichMax, whichMin as needed – returning NULL, returning only the first match
	
	change selection coefficient and dominance at particular conditions (generation, when a mutation frequency reaches a threshold, etc.)
	selective sweeps - use scripting to guarantee that a mutation sweeps by taking a snapshot and then restoring the snapshot if conditions are not met (like the mutation is lost)
	make it possible to drive a graph from script – maybe done as a callback into SLiMscript, like the rule idea?

SLiMscript optimization:
	Instrument first to see where the slow parts are
		0:96 runtime for profile_fitness.txt
		0:43 after making the built-in function map statically allocated
		0:38 after adding statically allocated SLiMscript constants
		0:24 after adding cached ScriptValue objects to represent SLiM globals
		0:20 after optimizing SymbolTable setup with static cached std::pairs
		0:19 after switching to lazy construction of output streams
		0:15 after taking SymbolTable off std::map
		0:10 after switching to external string pointers for predefined symbol names
		0:03 after smart injection of symbols based on a pre-scan of the tree
		0:01.7 after caching of pre-evaluated constant numbers and strings
		0:01.4 after switching to static instances for NULLs
		0:01.3 after making ScriptInterpreter use a SymbolTable reference
		0:00.86 after adding smart injection to SymbolTable
		0:00.59 after adding a built-in buffer to SymbolTable
		0:00.27 after adding constant script short-circuiting
	Instrumenting with MK_SLiMGUIsim4.txt
		0:76 initial time
		0:49 after special-casing singletons in GetValueForMemberOfElements()
		0:45 after changing C strings to static global std::strings
		0:44 after making static ScriptValue_NULL objects globals
		0:32 after switching to static globals for singleton logical ScriptValues
		0:28 after adding cached ScriptValues for object ids and generation
		0:26 after optimizing for self_symbol_ use in fitness callbacks
		0:26 after optimizing away checks for contains_wildcard_
		0:24.9 after fixing leaks and resizing default Genome allocation to 4 instead of 16
		0:24.1 after changing Genome to keep an internal Mutation* buffer to avoid malloc
		0:23.7 after changing Genome to use its mutations_ pointer to indicate a null genome
		0:23.0 after switching callbacks to use InitializeConstantSymbolEntry()
		0:22.1 after inlining SetExternallyOwned()
		0:21.9 after inlining AllocateNewSlot()
		0:18.5 after introducing ScriptValue_Float_singleton_const
		0:18.0 after introducing ScriptValue_Int_singleton_const
	Caching of integer indices for known identifiers (method/function names) so function/method lookup is just a switch(), no string compares
	
SLiMgui work:
	change script help window to a more complete help browser, with help on functions, classes, properties, methods, etc.
	have a menu item that installs the slim command-line tool in an appropriate spot, so the GUI app is a standalone install that can ship on a .dmg
	save per-script-file preferences for the color scale sliders, and later other things too; use the full file path as a key, probably – or put them into the script itself, using SLiMgui-specific tags, maybe
	run valgrind (http://valgrind.org) on SLiM once it runs on 10.10; Philipp says he will try this on 10.9
	update documentation - TeXShop latex for mac, might need ghostscript as well

changes to mention in docs:
	changed comment format from / to //
	revised example files to use new comment format
	full paths can now be supplied for files
	added ability to pass a seed value on the command line via -seed
	added ability to take a time measurement with -time (probably doesn't need to be documented)
	changed behavior regarding introduced mutations in the same subpopulation and the same generation; they would collide in the same individuals/strands (intentionally; see Philipp email 27 Dec. 2014), now they are placed randomly
	added #SEX command : #SEX \n <A|X|Y> [<x-dominance>]
	extended 'P' event (add subpop) to take an optional "initial sex ratio" double at the end, only when sex is turned on
	selfing changed to be deterministic; the requested selfing fraction is realized exactly in each generation
	migrants are now drawn from the source pop according to their fitness; in 1.8 they were drawn uniformly, although Philipp says it was documented as being according to fitness
	fixed some issues with input parsing; files that do not end in a newline now parse correctly, non-comment non-parameter non-blank lines at the top of a file now cause an error
	changes/additions to full output: now listing individuals (with M/F and genome indices), now stating S/H and sex ratio for populations output, now printing A/X/Y for genomes output
	changes/additions to sample output: now taking an optional M/F specifier to output one sex, now printing A/X/Y for genomes output
	tabs are now trimmed as whitespace in input files, not just spaces
	added new sex ratio change event, type X: <time> X <subpop-index> <ratio>
	population read-in supports the new output additions, but should still be able to read in an old-format output file also
	fix to zero out gene_conversion_fraction_; in version 1.8 gene conversion might have turned on without being requested (see my email to Philipp); added Chromosome constructor to fix this
	more than one mutation with a negative fitness could result in a positive fitness, since the two negatives would multiply to make a positive; fixed in a revision to 1.8, and in 2.0
	predetermined mutations doc says you can specify a selection coefficient and dominance coefficient, but you can't; doc error, apparently
	addition of SLiMscript, SLiMscribe
	mutation equality defined by pointer equality
	MS output slightly changed, now outputs positions spanning the interval [0,1] instead of (0,1]

building on the command line for me:
	g++ -O3 ./core/*.cpp -I/opt/local/include -L/opt/local/lib -lgsl -lgslcblas -std=c++11 -o slim


future plans:
	spatially and temporally varying selection pressures: for mutation-types
		in generation x, I want to change the sel coeff of all mutations of a given mutation-type in a given subpopulation
		what happens for new mutations of that type?
		seasonal changes in optimal phenotype, spatial variation in environmental optimum
		these seasonal changes alter the strength of selection, but not the optimum
		so this is a new type of event: for a given subpop and mutation-type, rescale all selection coefficients by x
	multiple chromosomes – more than one per individual
	test cases for verification: population genetic predictions like fixation probability
	SLAM on GitHub: local adaptation
	set a function governing population size: sin, cos, exp – to allow demography without having to set events per generation
	pull the dominance coefficient into the mutations, like the selection coefficient, and add events to change these too
	add in hard/soft selection: extend event syntax of “set N” to allow setting N as a function of mean fitness
	possibility of providing the alternative of Poisson-based offspring generation: choose parent pairs, draw # of offspring
		individuals could have individual-types, which would define their expected # of children
		statistical genetics and human evolution: bottlenecks and effective population size, debunking bottleneck myths
	2.0 documentation, with revision tracking on it




























