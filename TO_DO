command-line tool:
	set up testing code for validation, check against old version of the code
	switch to int32_t and such for all storage, I think; best to be predictable.  get rid of static_cast where possible
	could use stoi(), stof(), etc. instead of cstr() and atoi() etc.?
	can we use pointer equality to define equality of mutations, or is the current definition important?
	should we use map instead of multimap?  set?  unordered versions, possibly?
	add move constructor and move assignment operators to classes, = delete, to explicitly prevent those operations
	should perhaps define ostream output operators instead of the print() functions presently used?  but how to pass flags?

SLiMgui work:
	graphing
		changing axis scale for plots (context menu)
		copy the numbers behind a graph, in addition to copying the pdf (or save as a CSV)
	make selection snap to genomic element boundaries, control-click genomic element to select it exactly
	script syntax help could be more helpful: go into details on each option and what parameters it takes
	implement the "new event" buttons
	make possible to open an output file in the gui, to see the state of a cluster sim
	when a script is opened, set the window title accordingly
	have a menu item that installs the slim command-line tool in an appropriate spot, so the GUI app is a standalone install that can ship on a .dmg
	save per-script-file preferences for the color scale sliders, and later other things too; use the full file path as a key, probably – or put them into the script itself, using SLiMgui-specific tags, maybe
	run valgrind (http://valgrind.org) on SLiM once it runs on 10.10; Philipp says he will try this on 10.9
	update documentation - TeXShop latex for mac, might need ghostscript as well

convert input file parsing to flexc++/bisonc++
	add expression evaluation
	add scripting language
	change selection coefficient and dominance at particular conditions (generation, when a mutation frequency reaches a threshold, etc.)
	selective sweeps - use scripting to guarantee that a mutation sweeps by taking a snapshot and then restoring the snapshot if conditions are not met (like the mutation is lost)
	make it possible to drive a graph from script

changes to mention in docs:
	changed comment format from / to //
	revised example files to use new comment format
	full paths can now be supplied for files
	added ability to pass a seed value on the command line via -seed
	added ability to take a time measurement with -time (probably doesn't need to be documented)
	changed behavior regarding introduced mutations in the same subpopulation and the same generation; they would collide in the same individuals/strands (intentionally; see Philipp email 27 Dec. 2014), now they are placed randomly
	added #SEX command : #SEX \n <A|X|Y> [<x-dominance>]
	extended 'P' event (add subpop) to take an optional "initial sex ratio" double at the end, only when sex is turned on
	selfing changed to be deterministic; the requested selfing fraction is realized exactly in each generation
	migrants are now drawn from the source pop according to their fitness; in 1.8 they were drawn uniformly, although Philipp says it was documented as being according to fitness
	fixed some issues with input parsing; files that do not end in a newline now parse correctly, non-comment non-parameter non-blank lines at the top of a file now cause an error
	changes/additions to full output: now listing individuals (with M/F and genome indices), now stating S/H and sex ratio for populations output, now printing A/X/Y for genomes output
	changes/additions to sample output: now taking an optional M/F specifier to output one sex, now printing A/X/Y for genomes output
	tabs are now trimmed as whitespace in input files, not just spaces
	added new sex ratio change event, type X: <time> X <subpop-index> <ratio>
	population read-in supports the new output additions, but should still be able to read in an old-format output file also
	fix to zero out gene_conversion_fraction_; in version 1.8 gene conversion might have turned on without being requested (see my email to Philipp); added Chromosome constructor to fix this
	more than one mutation with a negative fitness could result in a positive fitness, since the two negatives would multiply to make a positive; fixed in a revision to 1.8, and in 2.0

building on the command line for me:
	g++ -O3 ./core/*.cpp -I/opt/local/include -L/opt/local/lib -lgsl -lgslcblas -std=c++11 -o slim


future plans:
	spatially and temporally varying selection pressures: for mutation-types
		in generation x, I want to change the sel coeff of all mutations of a given mutation-type in a given subpopulation
		what happens for new mutations of that type?
		seasonal changes in optimal phenotype, spatial variation in environmental optimum
		these seasonal changes alter the strength of selection, but not the optimum
		so this is a new type of event: for a given subpop and mutation-type, rescale all selection coefficients by x
	multiple chromosomes – more than one per individual
	test cases for verification: population genetic predictions like fixation probability
	SLAM on GitHub: local adaptation
	set a function governing population size: sin, cos, exp – to allow demography without having to set events per generation
	pull the dominance coefficient into the mutations, like the selection coefficient, and add events to change these too
	add in hard/soft selection: extend event syntax of “set N” to allow setting N as a function of mean fitness
	possibility of providing the alternative of Poisson-based offspring generation: choose parent pairs, draw # of offspring
		individuals could have individual-types, which would define their expected # of children
		statistical genetics and human evolution: bottlenecks and effective population size, debunking bottleneck myths
	2.0 documentation, with revision tracking on it




























