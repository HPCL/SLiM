// Note setup at the end

function (void)initializeMarkedMutations(i$ num_marks)
{
    for(i in 1:num_marks){
        initializeMutationType("m" + asString(i), 0.5, "f", 0.0);
    }
    // used for ongoing marking
    initializeMutationType("m0", 0.5, "f", 0.0);
    m0.mutationStackPolicy = "l";
    return;
}

function (void)initializeMarks(i$ num_marks)
{
    // add a separate type of mutation to each of some genomes
    markedGenomes = sample(sim.subpopulations.genomes, min(num_marks,2*sum(sim.subpopulations.individualCount)));
    for(k in seqAlong(markedGenomes)){
        for(pos in 0:sim.chromosome.lastPosition){
            mut = sim.mutationTypes[k];
            markedGenomes[k].addNewDrawnMutation(mut,pos);
        }
    }
    return;
}

function (void)ongoingMarks(i$ num_marks)
{
    // add a new mutation of type m0 to each of some genomes
    markedGenomes = sample(sim.subpopulations.genomes, min(num_marks,2*sum(sim.subpopulations.individualCount)));
    for(k in seqAlong(markedGenomes)){
        for(pos in 0:sim.chromosome.lastPosition){
            markedGenomes[k].addNewDrawnMutation(m0,pos);
        }
    }
    return;
}

function (void)outputMutationResult([s$ outputFile="test_output/slim_mutation_output.txt"]) {
    /* * *
     * For each individual, output
     * a list of mutations, and
     * a list of positions of those mutations.
     * * */
    sim.treeSeqOutput("test_output", binary=F, simplify=T);
    sim.treeSeqOutput("test_output/test_output.treeseq", binary=T, simplify=T);
    sim.treeSeqOutput("test_output/test_output.unsimplified.treeseq", binary=T, simplify=F);
    for (pop in sim.subpopulations) {
        for (ind in pop.individuals) {
            pedID = ind.pedigreeID;
            for(k in seqAlong(ind.genomes)){
                genome = ind.genomes[k];
                genomeID = (2 * pedID) + k;
                writeFile(outputFile, "#Genome: " + paste(genomeID), append=T);
                writeFile(outputFile, "Mutations: " + paste(genome.mutations.id), append=T);
                writeFile(outputFile, "Positions: " + paste(genome.mutations.position), append=T);
            }
        }
    }
}

function (void)outputMutationTypes([s$ outputFile="test_output/slim_mutation_output.txt"]) {
    /* * *
    * For each mutation type, output at each position the list of genomes
    * that have inherited a mutation of that type at that position
    *  * */
    sim.treeSeqOutput("test_output", binary=F, simplify=T);
    for(Mut in sim.mutationTypes){
        for(Pos in 0:sim.chromosome.lastPosition){
            GenomesWithMutAtPos = NULL;
            for(pop in sim.subpopulations) {
                for(Ind in pop.individuals){
                    pedID = Ind.pedigreeID;
                    for(k in seqAlong(Ind.genomes)){
                        genomeID = (2 * pedID) + k;
                        if(Ind.genomes[k].containsMarkerMutation(Mut,Pos)){
                            GenomesWithMutAtPos = c(GenomesWithMutAtPos,genomeID);
                        }
                    }
                }
                writeFile(outputFile, paste(Mut) + " " + paste(Pos), append=T);
                writeFile(outputFile, paste(GenomesWithMutAtPos), append=T);
            }
        }
    }
    return;
}

// SETUP WHATNOT

initializeTreeSeq();
defineConstant("n_marks",20);   // number of marked genomes
initializeMarkedMutations(n_marks);
